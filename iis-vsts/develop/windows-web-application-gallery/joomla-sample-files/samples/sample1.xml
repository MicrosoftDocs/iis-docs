<msdeploy.iisapp>
  <!-- iisapp path identifies the subdirectory in the ZIP file which
  contains all of the application files 
  -->
  <iisApp 
    path="joomla_17"
    />
  <!-- dbmysql path identifies the SQL script file that will be executed
  for database setup.  In this app's case, the script is being used
  to create the database user for the application
  -->
  <dbmysql 
    path="install.sql" 
    commandDelimiter="//" 
    removeCommandDelimiter="true" 
    /> 
<!-- Generate Joomla database -->
    <dbmysql path="joomla.sql"
    commandDelimiter="$$"
    removeCommandDelimiter="true" />

    <!-- Generate Admin User -->
    <dbmysql path="joomla_user.sql"
    commandDelimiter="$$"
    removeCommandDelimiter="true" />

    <!-- Sample data for Joomla site -->
    <dbmysql path="sample_data.sql"
    commandDelimiter="$$"
    removeCommandDelimiter="true" />

  <!-- alias is used to make a copy of a distribution file to a location
  where it will be used.  Note that when you specify the Application
  name in the "to" attribute, you should specify the full path using
  the value of iisapp above for the root.  Alias doesn't actually
  copy the file within the package.  It creates an alias to the 
  original file using the new file's path and name.  This alias then
  gets copied to the file system as if it were a real file within
  the package
  -->
  <!-- #Joomla
  You could use MS Deploy to ask the questions and populate the
  configuration.php file.  I don't recommend it for Joomla, as I think
  that the install routine you have handles that well
  -->
  <!--
  <alias
    from="joomla_17/configuration.php-dist"
    to="joomla_17/configuration.php" /> 
  -->
  <!-- setAcl with a setAclResourceType of "File" is used to set the access
  privileges for a file within the application.  In this case, the 
  ACL is being set on the configuration file that was created after the
  alias above was copied to disk.  This will enable the application to
  write to the configuration file as needed.  
  -->
  <!-- #Joomla
  The configuration.php file doesn't exist in the distro.  From a quick
  look through the code, it looks like the installation routines get
  triggered by the file not being there, or being too small.  This
  SetAcl directive will create the file empty, with permissions that
  allow PHP to write to it, so the installation routine can update the
  file.
  -->
  <setAcl 
    path="joomla_17/configuration.php"
    setAclResourceType="File"
    setAclAccess="Modify"
    setAclUser="anonymousAuthenticationUser" 
    />

  <!-- setAcl with no setAclResourceType set will default to setting an ACL
  on a directory.  We are setting an ACL here for the files directory.
  This directory is used to store files that are uploaded for the 
  application
  -->
  <!-- #Joomla -
  This ACL allows PHP to modify any file in the Joomla application tree.  
  It would be more secure to identify individual directories which require 
  write acces, rather than applying this to the whole tree.  If you set 
  individual ACLs, you will need a setAcl directive here in the manifest.xml 
  file for each, as well as a parameter entry for each in the parameters.xml 
  file.
  -->

<!-- We recommend setting Writeable permissions to only "Writable" directories in the application unless the application requires the "root" directory to be writable -->
  <setAcl 
    path="joomla_17" 
    setAclUser="anonymousAuthenticationUser" 
    setAclAccess="Modify" 
    />
  <!-- NOTE - with setAcl, the setAclUser can be explicitly set, or you can
  use the alias 'anonymousAuthenticationUser'.  This should be used in
  all situations, unless your application has a dependency on a specific
  OS user for access to these resources.

  Modify access includes Read and Write as well.  For a full breakdown
  on user rights, check out this article on MSDN:
  http://msdn.microsoft.com/en-us/library/system.security.accesscontrol.filesystemrights.aspx
  -->

</msdeploy.iisapp>