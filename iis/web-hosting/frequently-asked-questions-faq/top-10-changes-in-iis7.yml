### YamlMime:FAQ
metadata:
  title: "Top 10 Changes in IIS 7.0"
  author: walterov
  description: "You can find the original Top 10 Changes in IIS 7.0 post on Technet. 1. Simple, configurable command line setup Install only the IIS components needed to ru..."
  ms.date: 12/22/2007
  ms.assetid: 74c5bc26-6707-444b-a660-9009c1c85185
  msc.legacyurl: /learn/web-hosting/frequently-asked-questions-faq/top-10-changes-in-iis7
  msc.type: authoredcontent
    
title: Top 10 Changes in IIS 7.0
summary: |
  by [Walter Oliver](https://github.com/walterov)
  
  You can find the original [Top 10 Changes in IIS 7.0](https://docs.microsoft.com/archive/blogs/mscom/the-tasty-morsels-found-in-dogfood-mscom-ops-top-10-changes-in-iis7-0) blog post.
  

sections:
  - name: Ignored
    questions:
      - question: |
          1. Simple, configurable command line setup
        answer: |
          Install only the IIS components needed to run your site
          
          Example:
          
          [!code-console[Main](top-10-changes-in-iis7/samples/sample1.cmd)]
          
      - question: |
          2. Great compatibility story
        answer: |
          - Most (99%+) ASP and ASP.NET applications worked.
          
            - One application encountered breaking change
            - Handful of applications required config migration to run in Integrated
          
          (We have about 260 applications running on [www.microsoft.com](https://www.microsoft.com/) as defined by IIS. There are thousands of pages of code that could have broken but did not.)
          
          - [Integrated Pipeline](../../application-frameworks/building-and-running-aspnet-applications/how-to-take-advantage-of-the-iis-integrated-pipeline.md) is the new unified request processing pipeline. Benefits include:
          
            - Allowing services provided by both native and managed modules to apply to all requests, regardless of handler. For example, managed Forms Authentication can be used for all content, including ASP pages, CGIs, and static files.
            - Empowering ASP.NET components to provide functionality that was previously unavailable to them due to their placement in the server pipeline. For example, a managed module providing request rewriting functionality can rewrite the request prior to any server processing, including authentication, takes place.
            - A single place to implement, configure, monitor and support server features. For example, single module and handler mapping configuration, single custom errors configuration, single URL authorization configuration.
          - Classic ASP mode allows for easy app migration
          
            - ASP.NET Setup provides a "Classic .NET AppPool"
            - For more information, see the article [ASP.Net Integration With IIS 7.0](../../application-frameworks/building-and-running-aspnet-applications/aspnet-integration-with-iis.md)
          - Use [AppCmd](../../get-started/getting-started-with-iis/getting-started-with-appcmdexe.md) to migrate apps to Integrated mode
          
            - %windir%\system32\inetsrv\APPCMD.EXE migrate config &lt;Application Path>`
            - For more information about AppCmd.exe, see [Getting Started With AppCmd.exe](../../get-started/getting-started-with-iis/getting-started-with-appcmdexe.md)
          - [IIS 6.0 Metabase compatibility](../../manage/managing-your-configuration-settings/metabase-compatibility-with-iis-7-and-above.md) layer
          
            - Allows you the run old ADSI scripts
            - IIS 6.0 Metabase Compatibility module must be installed
          
      - question: |
          3. No more metabase!
        answer: |
          - Clean clear-text schema
          - IIS settings stored in XML configuration file (applicationHost.config)
          
            - Metabase exists for SMTP/NNTP/FTP only
          - [Site-wide changes made easily](../../get-started/introduction-to-iis/web-site-deployment-made-easy.md)
          
            - Update central applicationHost.config and copy to all web servers
            - Replaces our bulky ADSI based script solution for metabase changes
          - Microsoft.com considerations
          
            - Be careful copying to production servers under load. (When you push out a new applicationHost.config, your app pools and applications will be recycled. If you are heavily dependent on caching, then you could cause problems in your environment as the CLR reloads.)
          
      - question: |
          4. Centralized configuration
        answer: |
          - applicationHost.config stored on UNC share
          - Allows us to copy to two (maybe four) servers rather than 80
          
          **Potential issue** - managing password changes for account used to connect to config store. (This is because currently you cannot use the UNC share that is running under the Network service, which we use heavily. It currently requires a domain account, which our security policy mandates a periodic password change.)
          
      - question: |
          5. Delegated configuration
        answer: |
          - Admin can now delegate IIS settings to application owner
          - Settings defined in web.config file in application directory
          - Example of setting to delegate include:
          
            - System.webServer section of applicationHost.config
            - Caching, defaultDocument, httpErrors, security
          
          For more information, see [Delegated Configuration](../../manage/managing-your-configuration-settings/how-to-use-configuration-delegation-in-iis.md) .
          
      - question: |
          6. AppCmd and other new management options
        answer: |
          - Managing via the UI
          
            - New modular, task-based look and feel
            - Moving away from the right-click/properties paradigm
          - Managing via the Command Line
          
            - AppCmd
          - Command-line utility which replaces adsutil.vbs, iisapp.vbs, and others
          - Allows command line management of sites, applications, vdirs, apppools, modules, tracing, and more Powershell
          - IIS community creating IIS-specific Powershell cmdlets
          - MSCOM Considerations
          
            - AppCmd limitations - no remote
            - No IIS provider for Powershell
          
      - question: |
          7. Failed request tracing
        answer: |
          - Buffers the trace events for requests and flushes them to disk if they meet your failure criteria
          - Captures trace data while you are sleeping
          - Very little perf impact when targeting failing requests
          - Quick test: Enabling tracing for all file extensions and errors results in approx 5% fewer requests/second at full stress load (do not do this in production).
          - View Currently Executing Requests via AppCmd
          
            - appcmd list requests (for all request)
            - appcmd list requests /apppool.name:DefaultAppPool
          - New Task Scheduler
          
            - Trigger tasks on events
          
          For more information, see [Failed Request Tracing](../../troubleshoot/using-failed-request-tracing/troubleshooting-failed-requests-using-tracing-in-iis.md).
          
      - question: |
          8. Request filtering
        answer: |
          - No more URLScan
          - &lt;/requestFiltering&gt; settings in applicationHost.config
          - Issue for Microsoft.com: If filename includes "+" then allowDoubleEscaping must be set to "true"
          
            - &lt;requestFiltering allowDoubleEscaping="true"&gt;
          - Allow or disallow specific file extensions and verbs
          
            - &lt;add fileExtension=".exe" allowed="false" /&gt;
          - DenyURLSequences
          
            - &lt;add sequence="./" /&gt;
            - &lt;add sequence="/." /&gt;
          - RequestLimits
          
            - maxAllowedContentLength="1000000"
            - maxUrl="260"
            - maxQueryString="2048"
          
      - question: |
          9. UNC content
        answer: |
          - Simplified content synchronization
          - Reduced H/W footprint (potentially less cost)
          
            - Common industry pain point
          
      - question: |
          10. Output caching of dynamic content
        answer: |
          - Fewer off-box calls to back end dependencies
          - Significant performance gains
          - Simple WCAT (Web Capacity Analysis Tool) Stress Test against [www.microsoft.com/en/us/default.aspx](https://www.microsoft.com/en/us/default.aspx)
          
          Not appropriate for all applications (e.g., not effective for those with very personalized output)
          